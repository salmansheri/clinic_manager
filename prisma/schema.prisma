generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id             String        @id @default(uuid())
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  gender         String
  contactNumber  String
  email          String        @unique
  password       String
  address        String
  medicalHistory String
  appointments   Appointment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Bill           Bill[]
}

model Doctor {
  id             String        @id @default(uuid())
  firstName      String
  lastName       String
  specialization String
  contactNumber  String
  email          String        @unique
  password       String
  appointments   Appointment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Receptionist {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  contactNumber String
  email         String   @unique
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum STATUS {
  SHEDULED
  COMPLETED
  CANCELLED
}

model Appointment {
  id        String   @id @default(uuid())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
  dateTime  DateTime
  status    STATUS   @default(SHEDULED)
  notes     String?
  bill      Bill?
  token     Token?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BillStatus {
  PENDING
  PAID
  OVERDUE
}

model Bill {
  id            String      @id @default(uuid())
  patient       Patient     @relation(fields: [patientId], references: [id])
  patientId     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique
  totalAmount   Float
  status        BillStatus  @default(PENDING)
  dueDate       DateTime
  items         BillItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model BillItem {
  id          String   @id @default(uuid())
  bill        Bill     @relation(fields: [billId], references: [id])
  billId      String
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TokenStatus {
  WAITING
  CALLED
  COMPLETED
}

model Token {
  id            String      @id @default(uuid())
  number        Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique
  status        TokenStatus
  issuedAt      DateTime    @default(now())
  calledAt      DateTime?
  completedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
